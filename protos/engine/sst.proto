/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Sst types
syntax = "proto3";
package sst;

import "engine/schema.proto";
import "engine/time_range.proto";

message SstMetaData {
  oneof meta_data {
    ParquetMetaData parquet = 1;
  }
}

message ColumnFilter {
  oneof filter {
    bytes xor = 1;
  }
}

message RowGroupFilter {
  repeated ColumnFilter column_filters = 1;
}

message ColumnValueSet {
  message StringSet {
    repeated string values = 1;
  }

  oneof value {
    StringSet string_set = 1;
  }
}

message ParquetFilter {
  repeated RowGroupFilter row_group_filters = 1;
}

message ParquetMetaData {
  // Min key in the sst
  bytes min_key = 1;
  // Max key in the sst
  bytes max_key = 2;
  // Max sequence number in the sst
  uint64 max_sequence = 3;
  // The time range of the sst
  time_range.TimeRange time_range = 4;
  schema.TableSchema schema = 5;
  ParquetFilter filter = 6;
  // Deprecated, used in hybrid format.
  repeated uint32 collapsible_cols_idx = 7;
  // Optional column values, used to convert `not in` filter to `in`.
  // Only will set when column's cardinality is low.
  repeated ColumnValueSet column_values = 8;
}
